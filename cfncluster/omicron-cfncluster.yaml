AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Omicron CloudFormation template: deploys a containerized Omicron Galaxy server
  and an automatically scaling HPC cluster. **WARNING** This template creates
  AWS resources. You will be billed for the AWS resources used if you create a
  stack from this template.
  **WARNING** This template creates AWS resources. You will be billed for the
  AWS resources used if you create a stack from this template. Version:
  ami-201609030709 cfncluster-1.3.2
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cluster - Basic Setting
        Parameters:
          - KeyName
          - AvailabilityZone
          - MasterInstanceType
          - ComputeInstanceType
          - BaseOS
          - Scheduler
      - Label:
          default: EBS - Basic Settings
        Parameters:
          - VolumeSize
      - Label:
          default: Network - Advanced Settings
        Parameters:
          - AccessFrom
          - UsePublicIps
          - AdditionalSG
          - VPCSecurityGroupId
      - Label:
          default: Cluster - Advanced Setting
        Parameters:
          - InitialQueueSize
          - ComputeWaitConditionCount
          - MaxQueueSize
          - SpotPrice
          - ClusterType
          - ProxyServer
          - CustomAMI
          - MaintainInitialSize
          - PreInstallScript
          - PreInstallArgs
          - PostInstallArgs
          - PostInstallScript
          - S3ReadResource
          - S3ReadWriteResource
          - Placement
          - PlacementGroup
          - EncryptedEphemeral
          - EphemeralDir
          - SharedDir
          - CWLRegion
          - CWLLogGroup
          - CustomChefRunList
          - CustomChefCookbook
          - ExtraJson
          - Tenancy
          - EphemeralKMSKeyId
          - ClusterReadyScript
          - MasterRootVolumeSize
          - ComputeRootVolumeSize
          - EC2IAMRoleName
      - Label:
          default: EBS - Advanced Settings
        Parameters:
          - VolumeType
          - EBSSnapshotId
          - VolumeIOPS
          - EBSEncryption
          - EBSKMSKeyId
          - EBSVolumeId
      - Label:
          default: Scaling Settings
        Parameters:
          - ScalingPeriod
          - ScalingEvaluationPeriods
          - ScalingThreshold
          - ScalingAdjustment
          - ScalingThreshold2
          - ScalingAdjustment2
          - ScalingCooldown
      - Label:
          default: Additonal Settings
        Parameters:
          - CLITemplate
    ParameterLabels:
      KeyName:
        default: key_name
      AccessFrom:
        default: access_from
        AccessFrom:
          default: access_from
      VPCId:
        default: vpc_id
      UsePublicIps:
        default: use_public_ips
      AdditionalSG:
        default: additional_sg
      VPCSecurityGroupId:
        default: vpc_security_group_id
      ComputeInstanceType:
        default: compute_instance_type
      MasterInstanceType:
        default: master_instance_type
      InitialQueueSize:
        default: initial_queue_size
      MaxQueueSize:
        default: max_queue_size
      MaintainInitialSize:
        default: maintain_initial_size
      Scheduler:
        default: scheduler
      ClusterType:
        default: cluster_type
      EphemeralDir:
        default: ephemeral_dir
      SpotPrice:
        default: spot_price
      CustomAMI:
        default: custom_ami
      PreInstallScript:
        default: pre_install
      PostInstallScript:
        default: post_install
      PreInstallArgs:
        default: pre_install_args
      PostInstallArgs:
        default: post_install_args
      S3ReadResource:
        default: s3_read_resource
      S3ReadWriteResource:
        default: s3_read_write_resource
      CWLRegion:
        default: cwl_region
      CWLLogGroup:
        default: cwl_log_group
      ProxyServer:
        default: proxy_server
      Placement:
        default: placement
      PlacementGroup:
        default: placement_group
      EncryptedEphemeral:
        default: encrypted_ephemeral
      SharedDir:
        default: shared_dir
      Tenancy:
        default: tenancy
      EphemeralKMSKeyId:
        default: ephemeral_kms_key_id
      ClusterReadyScript:
        default: cluster_ready
      MasterRootVolumeSize:
        default: master_root_volume_size
      ComputeRootVolumeSize:
        default: compute_volume_size
      BaseOS:
        default: base_os
      EC2IAMRoleName:
        default: ec2_iam_role
      ExtraJson:
        default: extra_json
      CustomChefCookbook:
        default: custom_chef_cookbook
      CustomChefRunList:
        default: custom_chef_runlist
      EBSSnapshotId:
        default: ebs_snapshot_id
      VolumeType:
        default: volume_type
      VolumeSize:
        default: volume_size
      EBSKMSKeyId:
        default: ebs_kms_key_id
      VolumeIOPS:
        default: volume_iops
      EBSEncryption:
        default: ebs_encryption
      EBSVolumeId:
        default: ebs_volume_id
      ScalingThreshold:
        default: scaling_threshold
      ScalingPeriod:
        default: scaling_period
      ScalingEvaluationPeriods:
        default: scaling_evaluation_periods
      ScalingAdjustment:
        default: scaling_adjustment
      ScalingAdjustment2:
        default: scaling_adjustment2
      ScalingCooldown:
        default: scaling_cooldown
      ScalingThreshold2:
        default: scaling_threshold2
      ComputeWaitConditionCount:
        default: WAIT COUNT
      AvailabilityZone:
        default: AVAILABILITY ZONE
      CLITemplate:
        default: CLI TEMPLATE
Parameters:
  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instances
      using the default cluster user.
    Type: 'AWS::EC2::KeyPair::KeyName'
  MasterInstanceType:
    Description: MasterServer EC2 instance type
    Type: String
    Default: t2.medium
    ConstraintDescription: 'Must be a valid EC2 instance type, with support for HVM.'
    AllowedValues:
      - cc2.8xlarge
      - c3.8xlarge
      - c3.4xlarge
      - c3.2xlarge
      - c3.xlarge
      - c3.large
      - c4.8xlarge
      - c4.4xlarge
      - c4.2xlarge
      - c4.xlarge
      - c4.large
      - r3.8xlarge
      - r3.4xlarge
      - r3.2xlarge
      - r3.xlarge
      - r3.large
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i2.8xlarge
      - i2.4xlarge
      - i2.2xlarge
      - i2.xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - cr1.8xlarge
      - cg1.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - hi1.4xlarge
      - g2.2xlarge
      - g2.8xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - d2.8xlarge
      - d2.4xlarge
      - d2.2xlarge
      - d2.xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - f1.2xlarge
      - f1.16xlarge
  ComputeInstanceType:
    Description: ComputeFleet EC2 instance type
    Type: String
    Default: m4.xlarge
    ConstraintDescription: 'Must be a valid EC2 instance type, with support for HVM.'
    AllowedValues:
      - cc2.8xlarge
      - c3.8xlarge
      - c3.4xlarge
      - c3.2xlarge
      - c3.xlarge
      - c3.large
      - c4.8xlarge
      - c4.4xlarge
      - c4.2xlarge
      - c4.xlarge
      - c4.large
      - r3.8xlarge
      - r3.4xlarge
      - r3.2xlarge
      - r3.xlarge
      - r3.large
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i2.8xlarge
      - i2.4xlarge
      - i2.2xlarge
      - i2.xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - cr1.8xlarge
      - cg1.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - hi1.4xlarge
      - g2.2xlarge
      - g2.8xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - d2.8xlarge
      - d2.4xlarge
      - d2.2xlarge
      - d2.xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - f1.2xlarge
      - f1.16xlarge
  InitialQueueSize:
    Description: >-
      Initial number of EC2 instances to launch as compute nodes within the
      cluster. This value maps to the DesiredSize parameter for the ComputeFleet
      AutoScaling Group.
    Type: Number
    Default: '1'
  MaxQueueSize:
    Description: >-
      Maximum number of EC2 instances that can be launched in the cluster. This
      value maps to the MaxSize parameter for the ComputeFleet AutoScaling
      Group.
    Type: Number
    Default: '10'
  ScalingThreshold:
    Description: Threshold for triggering CloudWatch ScaleUp action
    Type: String
    Default: '1'
  ScalingEvaluationPeriods:
    Description: >-
      Number of periods consective periods required to trigger the scaling
      adjustment
    Type: String
    Default: '2'
  ScalingPeriod:
    Description: Period in seconds to measure ScalingThreshold
    Type: String
    Default: '60'
  SpotPrice:
    Description: >-
      Spot bid price for the ComputeFleet AutoScaling Group when the ClusterType
      = "spot".
    Type: Number
    Default: '0.42'
  ClusterType:
    Description: >-
      Type of cluster to launch. Can either be "ondemand" or "spot". Choosing
      "spot" will cause the ComputeFleet AutoScaling group to launch EC2 Spot
      instances. Default value is "ondemand".
    Type: String
    Default: spot
    ConstraintDescription: 'Must be a supported cluster type: ondemand, spot'
    AllowedValues:
      - ondemand
      - spot
  ProxyServer:
    Description: >-
      hostname and port of HTTP proxy server for cfn-init, boto and yum i.e.
      proxy.example.com:8080
    Type: String
    Default: NONE
  VolumeSize:
    Description: 'Size of EBS volume in GB, if creating a new one'
    Type: Number
    Default: '500'
  VolumeType:
    Description: Type of volume to create either new or from snapshot
    Type: String
    Default: st1
    ConstraintDescription: 'must be a supported volume type: standard, io1, gp2, st1, sc1'
    AllowedValues:
      - standard
      - gp2
      - io1
      - st1
      - sc1
  AvailabilityZone:
    Description: Availability Zone the cluster will launch into. THIS IS REQUIRED
    Type: 'AWS::EC2::AvailabilityZone::Name'
  EBSSnapshotId:
    Description: Id of EBS snapshot if using snapshot as source for volume
    Type: String
    Default: NONE
    AllowedPattern: '(NONE|^snap-[0-9a-z]{8}$|^snap-[0-9a-z]{17}$)'
  CustomAMI:
    Description: 'ID of a Custom AMI, to use instead of published AMI''s'
    Type: String
    Default: NONE
    AllowedPattern: '(NONE|^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$)'
  AccessFrom:
    Description: Lockdown SSH/HTTP access (default can be accessed from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  MaintainInitialSize:
    Description: >-
      Boolean flag to set autoscaling group to maintain initial size and scale
      back
    Type: String
    Default: 'false'
    ConstraintDescription: true/false
    AllowedValues:
      - 'true'
      - 'false'
  UsePublicIps:
    Description: >-
      Boolean flag to use public IP's for instances. If false, the VPC must be
      correctly setup to use NAT for all traffic.
    Type: String
    Default: 'true'
    ConstraintDescription: true/false
    AllowedValues:
      - 'true'
      - 'false'
  VolumeIOPS:
    Description: Number of IOPS for volume type io1. Not used for other volume types.
    Type: Number
    Default: '100'
  PreInstallScript:
    Description: Preinstall script URL. This is run before any host configuration.
    Type: String
    Default: NONE
  PostInstallScript:
    Description: Postinstall script URL. This is run before any host configuration.
    Type: String
    Default: "https://raw.githubusercontent.com/chambm/omicron-galaxy/update_17.09/cfncluster/omicronPostInstall.sh"
  ComputeWaitConditionCount:
    Description: Specific number of instances to wait for while creating the cluster
    Type: Number
    Default: '1'
  S3ReadResource:
    Description: S3 resource with read access from cfncluster nodes
    Type: String
    Default: NONE
  S3ReadWriteResource:
    Description: >-
      Addtional policy document to be added to EC2 IAM role created and assigned
      to all nodes.
    Type: String
    Default: NONE
  Placement:
    Description: >-
      Type of placement requird in cfncluster, it can either be cluster or
      compute.
    Type: String
    Default: cluster
    AllowedValues:
      - cluster
      - compute
  PlacementGroup:
    Description: The name of an existing placement group
    Type: String
    Default: NONE
  EncryptedEphemeral:
    Description: >-
      Boolean flag to encrypt local ephemeral drives. The keys are in-memory and
      non-recoverable.
    Type: String
    Default: 'false'
    ConstraintDescription: true/false
    AllowedValues:
      - 'true'
      - 'false'
  PreInstallArgs:
    Description: Preinstall script args passed to the preinstall script.
    Type: String
    Default: NONE
  PostInstallArgs:
    Description: Postinstall script args passed to the postinstall script.
    Type: String
    Default: NONE
  EBSEncryption:
    Description: >-
      Boolean flag to use EBS encryption for /shared volume. (Not to be used for
      snapshots)
    Type: String
    Default: 'false'
    ConstraintDescription: true/false
    AllowedValues:
      - 'true'
      - 'false'
  EphemeralDir:
    Description: The path/mountpoint for the ephemeral drive
    Type: String
    Default: /scratch
  BaseOS:
    Description: Base OS type for cluster AMI
    Type: String
    Default: alinux
    ConstraintDescription: must be a supported base OS
    AllowedValues:
      - centos6
      - centos7
      - alinux
      - ubuntu1404
      - ubuntu1604
  ScalingThreshold2:
    Description: Threshold for triggering CloudWatch ScaleUp2 action
    Type: String
    Default: '200'
  ScalingCooldown:
    Description: Period in seconds to wait before allowing further scaling actions
    Type: String
    Default: '300'
  ScalingAdjustment:
    Description: >-
      Number of instances to add to cluster when the CloudWatch ScaleUp action
      is called.
    Type: String
    Default: '1'
  ScalingAdjustment2:
    Description: >-
      Number of instances to add to cluster when the CloudWatch ScaleUp2 action
      is called.
    Type: String
    Default: '10'
  Scheduler:
    Description: Cluster scheduler
    Type: String
    Default: slurm
    ConstraintDescription: must be a supported scheduler
    AllowedValues:
      - sge
      - openlava
      - torque
      - slurm
      - custom
      - test
      - pbspro
  SharedDir:
    Description: The path/mountpoint for the shared drive
    Type: String
    Default: /export
  CLITemplate:
    Type: String
    Default: default
  AdditionalSG:
    Description: Additional VPC secuirty group to be added to instances. Defaults to NONE
    Type: String
    Default: NONE
    AllowedPattern: '(NONE|^sg-[0-9a-z]{8}$)'
  CWLRegion:
    Description: CloudWatch Logs region
    Type: String
    Default: NONE
  CWLLogGroup:
    Description: CloudWatch Logs LogGroup
    Type: String
    Default: NONE
  CustomChefRunList:
    Description: 'Custom run list, which will override the default'
    Type: String
    Default: NONE
  CustomChefCookbook:
    Description: >-
      URL of custom cookbook that will override the default. This will be
      unpacked and then dependencies resolved with Berkshelf.
    Type: String
    Default: NONE
  ExtraJson:
    Description: Extra json to be added to Chef dna.json
    Type: String
    Default: '{}'
  Tenancy:
    Description: >-
      Type of placement requird in cfncluster, it can either be cluster or
      compute.
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated
  EBSKMSKeyId:
    Description: 'KMS ARN for customer created master key, will be used for EBS encryption'
    Type: String
    Default: NONE
  EphemeralKMSKeyId:
    Description: >-
      KMS ARN for customer created master key, will be used for ephemeral
      encryption
    Type: String
    Default: NONE
  ClusterReadyScript:
    Description: >-
      Cluster ready script URL. This is only on the MasterServer, when the
      cluster reaches CREATE_COMPLETE.
    Type: String
    Default: NONE
  MasterRootVolumeSize:
    Description: Size of MasterServer EBS root volume in GB
    Type: Number
    Default: '100'
    MinValue: '15'
  ComputeRootVolumeSize:
    Description: Size of ComputeFleet EBS root volume in GB
    Type: Number
    Default: '100'
    MinValue: '15'
  EC2IAMRoleName:
    Description: Existing EC2 IAM role name
    Type: String
    Default: NONE
  VPCSecurityGroupId:
    Description: Existing VPC security group Id
    Type: String
    Default: NONE
    AllowedPattern: '(NONE|^sg-[0-9a-z]{8}$)'
  EBSVolumeId:
    Description: Existing EBS volume Id
    Type: String
    Default: NONE
    AllowedPattern: '(NONE|^vol-[0-9a-z]{8}$|^vol-[0-9a-z]{17}$)'
  AdditionalCfnTemplate:
    Description: A second CloudFormation template to launch with the cluster
    Type: String
    Default: NONE
Conditions:
  UseSpotInstances: !Equals 
    - !Ref ClusterType
    - spot
  UseEBSSnapshot: !Not 
    - !Equals 
      - !Ref EBSSnapshotId
      - NONE
  UseCustomRunList: !Not 
    - !Equals 
      - !Ref CustomChefRunList
      - NONE
  UseCustomAMI: !Not 
    - !Equals 
      - !Ref CustomAMI
      - NONE
  MaintainInitialASGSize: !Equals 
    - !Ref MaintainInitialSize
    - 'true'
  MasterPublicIp: !Equals 
    - !Ref UsePublicIps
    - 'true'
  UseEBSPIOPS: !Equals 
    - !Ref VolumeType
    - io1
  UseS3ReadPolicy: !Not 
    - !Equals 
      - !Ref S3ReadResource
      - NONE
  UsePlacementGroup: !Not 
    - !Equals 
      - !Ref PlacementGroup
      - NONE
  UseClusterPlacement: !And 
    - !Equals 
      - !Ref Placement
      - cluster
    - !Condition UsePlacementGroup
  UseEBSEncryption: !Equals 
    - !Ref EBSEncryption
    - 'true'
  UseS3ReadWritePolicy: !Not 
    - !Equals 
      - !Ref S3ReadWriteResource
      - NONE
  CloudWatchLogs: !And 
    - !Not 
      - !Equals 
        - !Ref CWLRegion
        - NONE
    - !Not 
      - !Equals 
        - !Ref CWLLogGroup
        - NONE
  AddAdditionalSG: !Not 
    - !Equals 
      - !Ref AdditionalSG
      - NONE
  UseEBSKMSKey: !And 
    - !Not 
      - !Equals 
        - !Ref EBSKMSKeyId
        - NONE
    - !Condition UseEBSEncryption
  UseEphemeralKMSKey: !And 
    - !Not 
      - !Equals 
        - !Ref EphemeralKMSKeyId
        - NONE
    - !Equals 
      - !Ref EncryptedEphemeral
      - 'true'
  UseDedicatedTenancy: !Equals 
    - !Ref Tenancy
    - dedicated
  UseEC2IAMRole: !Not 
    - !Equals 
      - !Ref EC2IAMRoleName
      - NONE
  CreateEC2IAMRole: !Equals 
    - !Ref EC2IAMRoleName
    - NONE
  UseExistingSecurityGroup: !Not 
    - !Equals 
      - !Ref VPCSecurityGroupId
      - NONE
  UseExistingEBSVolume: !Not 
    - !Equals 
      - !Ref EBSVolumeId
      - NONE
  CreateEBSVolume: !Equals 
    - !Ref EBSVolumeId
    - NONE
  CreateSecurityGroups: !Equals 
    - !Ref VPCSecurityGroupId
    - NONE
  CreateSubStack: !Not 
    - !Equals 
      - !Ref AdditionalCfnTemplate
      - NONE
  CreatePlacementGroup: !And 
    - !Equals 
      - !Ref PlacementGroup
      - DYNAMIC
    - !Condition UsePlacementGroup
Mappings:
  AWSInstanceType2Capabilites:
    cc2.8xlarge:
      Arch: 64HVM
      EBSOpt: 'False'
    cr1.8xlarge:
      Arch: 64HVM
      EBSOpt: 'False'
    g2.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    g2.8xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    p2.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    p2.8xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    p2.16xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    m3.medium:
      Arch: 64HVM
      EBSOpt: 'False'
    m3.large:
      Arch: 64HVM
      EBSOpt: 'False'
    m3.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    m3.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    c3.8xlarge:
      Arch: 64HVM
      EBSOpt: 'False'
    c3.4xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    c3.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    c3.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    c3.large:
      Arch: 64HVM
      EBSOpt: 'False'
    c4.8xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    c4.4xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    c4.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    c4.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    c4.large:
      Arch: 64HVM
      EBSOpt: 'True'
    r3.8xlarge:
      Arch: 64HVM
      EBSOpt: 'False'
    r3.4xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    r3.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    r3.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    r3.large:
      Arch: 64HVM
      EBSOpt: 'False'
    r4.large:
      Arch: 64HVM
      EBSOpt: 'True'
    r4.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    r4.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    r4.4xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    r4.8xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    r4.16xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    i2.8xlarge:
      Arch: 64HVM
      EBSOpt: 'False'
    i2.4xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    i2.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    i2.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    i2.large:
      Arch: 64HVM
      EBSOpt: 'False'
    i3.large:
      Arch: 64HVM
      EBSOpt: 'True'
    i3.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    i3.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    i3.4xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    i3.8xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    i3.16xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    cg1.4xlarge:
      Arch: 64HVM
      EBSOpt: 'False'
    t2.nano:
      Arch: 64HVM
      EBSOpt: 'False'
    t2.micro:
      Arch: 64HVM
      EBSOpt: 'False'
    t2.small:
      Arch: 64HVM
      EBSOpt: 'False'
    t2.medium:
      Arch: 64HVM
      EBSOpt: 'False'
    t2.large:
      Arch: 64HVM
      EBSOpt: 'False'
    t2.xlarge:
      Arch: 64HVM
      EBSOpt: 'False'
    t2.2xlarge:
      Arch: 64HVM
      EBSOpt: 'False'
    d2.8xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    d2.4xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    d2.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    d2.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    x1.16xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    x1.32xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    f1.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    f1.16xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    m4.16xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    m4.10xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    m4.4xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    m4.2xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    m4.xlarge:
      Arch: 64HVM
      EBSOpt: 'True'
    m4.large:
      Arch: 64HVM
      EBSOpt: 'True'
  AWSRegionOS2AMI:
    ap-northeast-1:
      alinux: ami-586b653f
      centos6: ami-10686677
      centos7: ami-0e6b6569
      ubuntu1404: ami-466c6221
      ubuntu1604: ami-ce6c62a9
    ap-northeast-2:
      alinux: ami-ea71ad84
      centos6: ami-bb77abd5
      centos7: ami-9377abfd
      ubuntu1404: ami-2877ab46
      ubuntu1604: ami-d072aebe
    ap-south-1:
      alinux: ami-1f720d70
      centos6: ami-0a710e65
      centos7: ami-546d123b
      ubuntu1404: ami-11700f7e
      ubuntu1604: ami-446f102b
    ap-southeast-1:
      alinux: ami-1f1b987c
      centos6: ami-9b1596f8
      centos7: ami-da1596b9
      ubuntu1404: ami-be1497dd
      ubuntu1604: ami-951596f6
    ap-southeast-2:
      alinux: ami-56b9af35
      centos6: ami-c7b9afa4
      centos7: ami-afa6b0cc
      ubuntu1404: ami-37a4b254
      ubuntu1604: ami-cca6b0af
    ca-central-1:
      alinux: ami-65f94601
      centos6: ami-a6f847c2
      centos7: ami-62f94606
      ubuntu1404: ami-eefc438a
      ubuntu1604: ami-a7fa45c3
    eu-central-1:
      alinux: ami-7fd17510
      centos6: ami-56d67239
      centos7: ami-9cd571f3
      ubuntu1404: ami-bcd773d3
      ubuntu1604: ami-40d6722f
    eu-west-1:
      alinux: ami-6ddac60b
      centos6: ami-abd5c9cd
      centos7: ami-6dd8c40b
      ubuntu1404: ami-83d4c8e5
      ubuntu1604: ami-e6d5c980
    eu-west-2:
      alinux: ami-f1bbac95
      centos6: ami-cabcabae
      centos7: ami-9cb9aef8
      ubuntu1404: ami-5cb9ae38
      ubuntu1604: ami-5eb9ae3a
    sa-east-1:
      alinux: ami-a990f8c5
      centos6: ami-b491f9d8
      centos7: ami-5092fa3c
      ubuntu1404: ami-6d91f901
      ubuntu1604: ami-df90f8b3
    us-east-1:
      alinux: ami-2492c832
      centos6: ami-a293c9b4
      centos7: ami-d29cc6c4
      ubuntu1404: ami-a192c8b7
      ubuntu1604: ami-8c9fc59a
    us-east-2:
      alinux: ami-a6d3f5c3
      centos6: ami-2cd3f549
      centos7: ami-c3d2f4a6
      ubuntu1404: ami-e2d3f587
      ubuntu1604: ami-54d5f331
    us-west-1:
      alinux: ami-39c2e059
      centos6: ami-65c2e005
      centos7: ami-17fcde77
      ubuntu1404: ami-b5c2e0d5
      ubuntu1604: ami-0dfddf6d
    us-west-2:
      alinux: ami-f4b0b98d
      centos6: ami-6bb1b812
      centos7: ami-22b2bb5b
      ubuntu1404: ami-f5b0b98c
      ubuntu1604: ami-c4b1b8bd
    us-gov-west-1:
      centos6: NOT_SUPPORTED
      centos7: NOT_SUPPORTED
      alinux: NOT_SUPPORTED
      ubuntu1404: NOT_SUPPORTED
      ubuntu1604: NOT_SUPPORTED
  OSFeatures:
    centos6:
      User: centos
      RootDevice: /dev/sda1
    centos7:
      User: centos
      RootDevice: /dev/sda1
    alinux:
      User: ec2-user
      RootDevice: /dev/xvda
    ubuntu1404:
      User: ubuntu
      RootDevice: /dev/sda1
    ubuntu1604:
      User: ubuntu
      RootDevice: /dev/sda1
  CfnClusterVersions:
    default:
      cfncluster: cfncluster-1.3.2
      cookbook: cfncluster-cookbook-1.3.2
      chef: 12.19.36
      ridley: 5.1.0
      berkshelf: 5.6.4
      ami: dev
  AWSRegion2Capabilites:
    eu-west-1:
      arn: aws
    eu-west-2:
      arn: aws
    us-east-1:
      arn: aws
    us-east-2:
      arn: aws
    ap-northeast-1:
      arn: aws
    us-west-2:
      arn: aws
    sa-east-1:
      arn: aws
    us-west-1:
      arn: aws
    ap-southeast-1:
      arn: aws
    ap-southeast-2:
      arn: aws
    eu-central-1:
      arn: aws
    us-gov-west-1:
      arn: aws-us-gov
    ap-northeast-2:
      arn: aws
    ap-south-1:
      arn: aws
    ca-central-1:
      arn: aws
Resources:
  SQS:
    Type: 'AWS::SQS::Queue'
    Properties: {}
    Metadata: {}
  SQSPolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Id: MyQueuePolicy
        Statement:
          - Sid: Allow-SendMessage-From-AS-SNS-Topic
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'sqs:SendMessage'
            Resource: '*'
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref SNS
      Queues:
        - !Ref SQS
    Metadata: {}
  SNS:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !GetAtt 
            - SQS
            - Arn
          Protocol: sqs
    Metadata: {}
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: instanceId
          AttributeType: S
      KeySchema:
        - AttributeName: instanceId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
    Metadata: {}
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
    Condition: CreateEC2IAMRole
    Metadata: {}
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole
    Condition: CreateEC2IAMRole
    Metadata: {}
  CfnClusterPolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: cfncluster
      PolicyDocument:
        Statement:
          - Sid: EC2
            Action:
              - 'ec2:AttachVolume'
              - 'ec2:DescribeInstanceAttribute'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeInstances'
            Effect: Allow
            Resource:
              - '*'
          - Sid: DynamoDBList
            Action:
              - 'dynamodb:ListTables'
            Effect: Allow
            Resource:
              - '*'
          - Sid: SQSQueue
            Action:
              - 'sqs:SendMessage'
              - 'sqs:ReceiveMessage'
              - 'sqs:ChangeMessageVisibility'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueUrl'
            Effect: Allow
            Resource:
              - !GetAtt 
                - SQS
                - Arn
          - Sid: Autoscaling
            Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              - 'autoscaling:SetDesiredCapacity'
            Effect: Allow
            Resource:
              - '*'
          - Sid: CloudWatch
            Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource:
              - '*'
          - Sid: DynamoDBTable
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:GetItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:DescribeTable'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !FindInMap 
                    - AWSRegion2Capabilites
                    - !Ref 'AWS::Region'
                    - arn
                  - ':dynamodb:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':table/'
                  - !Ref DynamoDBTable
          - Sid: SQSList
            Action:
              - 'sqs:ListQueues'
            Effect: Allow
            Resource:
              - '*'
          - Sid: CloudWatchLogs
            Action:
              - 'logs:*'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !FindInMap 
                    - AWSRegion2Capabilites
                    - !Ref 'AWS::Region'
                    - arn
                  - ':logs:*:*:*'
      Roles:
        - !Ref RootRole
    Condition: CreateEC2IAMRole
    Metadata: {}
  S3ReadRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3Read
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: S3Read
            Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource:
              - !Ref S3ReadResource
      Roles:
        - !Ref RootRole
    Condition: UseS3ReadPolicy
    Metadata: {}
  S3ReadWriteRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3ReadWrite
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: S3ReadWrite
            Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Ref S3ReadWriteResource
      Roles:
        - !Ref RootRole
    Condition: UseS3ReadWritePolicy
    Metadata: {}
  MasterEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    Condition: MasterPublicIp
  MasterServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref MasterInstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvdba
          VirtualName: ephemeral0
        - DeviceName: /dev/xvdbb
          VirtualName: ephemeral1
        - DeviceName: /dev/xvdbc
          VirtualName: ephemeral2
        - DeviceName: /dev/xvdbd
          VirtualName: ephemeral3
        - DeviceName: /dev/xvdbe
          VirtualName: ephemeral4
        - DeviceName: /dev/xvdbf
          VirtualName: ephemeral5
        - DeviceName: /dev/xvdbg
          VirtualName: ephemeral6
        - DeviceName: /dev/xvdbh
          VirtualName: ephemeral7
        - DeviceName: /dev/xvdbi
          VirtualName: ephemeral8
        - DeviceName: /dev/xvdbj
          VirtualName: ephemeral9
        - DeviceName: /dev/xvdbk
          VirtualName: ephemeral10
        - DeviceName: /dev/xvdbl
          VirtualName: ephemeral11
        - DeviceName: /dev/xvdbm
          VirtualName: ephemeral12
        - DeviceName: /dev/xvdbn
          VirtualName: ephemeral13
        - DeviceName: /dev/xvdbo
          VirtualName: ephemeral14
        - DeviceName: /dev/xvdbp
          VirtualName: ephemeral15
        - DeviceName: /dev/xvdbq
          VirtualName: ephemeral16
        - DeviceName: /dev/xvdbr
          VirtualName: ephemeral17
        - DeviceName: /dev/xvdbs
          VirtualName: ephemeral18
        - DeviceName: /dev/xvdbt
          VirtualName: ephemeral19
        - DeviceName: /dev/xvdbu
          VirtualName: ephemeral20
        - DeviceName: /dev/xvdbv
          VirtualName: ephemeral21
        - DeviceName: /dev/xvdbw
          VirtualName: ephemeral22
        - DeviceName: /dev/xvdbx
          VirtualName: ephemeral23
        - DeviceName: !FindInMap 
            - OSFeatures
            - !Ref BaseOS
            - RootDevice
          Ebs:
            VolumeSize: !Ref MasterRootVolumeSize
            VolumeType: gp2
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: Master
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref MasterENI
          DeviceIndex: '0'
      ImageId: !If 
        - UseCustomAMI
        - !Ref CustomAMI
        - !FindInMap 
          - AWSRegionOS2AMI
          - !Ref 'AWS::Region'
          - !Ref BaseOS
      EbsOptimized: !FindInMap 
        - AWSInstanceType2Capabilites
        - !Ref MasterInstanceType
        - EBSOpt
      IamInstanceProfile: !If 
        - UseEC2IAMRole
        - !Ref EC2IAMRoleName
        - !Ref RootInstanceProfile
      PlacementGroupName: !If 
        - UseClusterPlacement
        - !If 
          - CreatePlacementGroup
          - !Ref DynamicPlacementGroup
          - !Ref PlacementGroup
        - !Ref 'AWS::NoValue'
      Tenancy: !Ref Tenancy
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            - |+
              MIME-Version: 1.0

            - |
              --==BOUNDARY==
            - |
              Content-Type: text/cloud-config; charset="us-ascii"
            - |+
              MIME-Version: 1.0

            - |
              #cloud-config:
            - |
              runcmd:
            - ' - [  sh, "which yum && echo '
            - !Ref ProxyServer
            - |2
               >> /etc/yum.conf" ]
            - ' - [ sh, "which apt-get && echo Acquire::http::Proxy "'
            - !Ref ProxyServer
            - |
              "; >> /etc/apt/apt.conf" ]
            - |
              --==BOUNDARY==
            - |
              Content-Type: text/x-shellscript; charset="us-ascii"
            - |+
              MIME-Version: 1.0

            - |+
              #!/bin/bash -x

            - |
              function error_exit
            - |
              {
            - '  cfn-signal ${proxy_args} --exit-code=1 --reason="$1" --stack='
            - !Ref 'AWS::StackName'
            - ' --resource=MasterServer --region='
            - !Ref 'AWS::Region'
            - |+

            - |2
                exit 1
            - |
              }
            - |
              function bootstrap_instance
            - |
              {
            - |2
                which yum 2>/dev/null; yum=$?
            - |2
                which apt-get 2>/dev/null; apt=$?
            - |2
                if [ "$yum" == "0" ]; then
            - |2
                  yum -y groupinstall development && yum -y install curl wget
            - |2
                fi
            - |2
                if [ "$apt" == "0" ]; then
            - |2
                  apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget
            - |2
                fi
            - |2
                which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)
            - |2
                mkdir -p /etc/chef && chown -R root:root /etc/chef
            - |2
                curl -L https://www.chef.io/chef/install.sh | bash -s -- -v $chef_version
            - |2
                /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:$ridley_version berkshelf:$berkshelf_version
            - |2
                curl -s -L -o /etc/chef/cfncluster-cookbook.tgz $cookbook_url
            - |2
                curl -s -L -o /etc/chef/cfncluster-cookbook.tgz.date $cookbook_url.date
            - |2
                curl -s -L -o /etc/chef/cfncluster-cookbook.tgz.md5 $cookbook_url.md5
            - |2
                mkdir /opt/cfncluster && echo $cfncluster_version | tee /opt/cfncluster/.bootstrapped
            - |
              }
            - proxy=
            - !Ref ProxyServer
            - |+

            - custom_cookbook=
            - !Ref CustomChefCookbook
            - |+

            - |
              if [ "$proxy" != "NONE" ]; then
            - |2
                proxy_args="--http-proxy=${proxy} --https-proxy=${proxy}"
            - |2
                proxy_host=$(echo "$proxy" | awk -F/ '{print $3}' | cut -d: -f1)
            - |2
                proxy_port=$(echo "$proxy" | awk -F/ '{print $3}' | cut -d: -f2)
            - |2
                export http_proxy=$proxy; export https_proxy=$http_proxy
            - |2
                export HTTP_PROXY=$proxy; export HTTPS_PROXY=$http_proxy
            - |2
                export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254
            - |2
                echo -e "export http_proxy=$proxy; export https_proxy=$http_proxy
              export HTTP_PROXY=$proxy; export HTTPS_PROXY=$http_proxy
              export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254
              " >/tmp/proxy.sh
            - |2
                echo -e "[Boto]
              proxy = ${proxy_host}
              proxy_port = ${proxy_port}
              " >/etc/boto.cfg
            - |
              else
            - |2
                proxy_args=""
            - |2
                touch /tmp/proxy.sh
            - |
              fi
            - |
              if [ "$custom_cookbook" != "NONE" ]; then
            - |2
                cookbook_url=$custom_cookbook
            - |
              else
            - '  if [ "'
            - !Ref 'AWS::Region'
            - |
              " == "us-east-1" ]; then
            - |2
                  s3_prefix=s3
            - |2
                else
            - '    s3_prefix=s3-'
            - !Ref 'AWS::Region'
            - |+

            - |2
                fi
            - '  cookbook_url=https://${s3_prefix}.amazonaws.com/cfncluster-resources-'
            - !Ref 'AWS::Region'
            - /cookbooks/
            - !FindInMap 
              - CfnClusterVersions
              - default
              - cookbook
            - |
              .tgz
            - |
              fi
            - >
              export
              PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
            - export cfncluster_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - cfncluster
            - |+

            - export cookbook_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - cookbook
            - |+

            - export chef_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - chef
            - |+

            - export ridley_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - ridley
            - |+

            - export berkshelf_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - berkshelf
            - |+

            - |
              if [ -f /opt/cfncluster/.bootstrapped ]; then
            - |2
                installed_version=$(cat /opt/cfncluster/.bootstrapped)
            - |2
                if [ "$cfncluster_version" != "$installed_version" ]; then
            - |2
                  bootstrap_instance
            - |2
                fi
            - |
              else
            - |2
                bootstrap_instance
            - |
              fi
            - |
              mkdir /tmp/cookbooks
            - |
              cd /tmp/cookbooks
            - >
              curl -v -L -o /etc/chef/cfncluster-cookbook.tgz -z "$(cat
              /etc/chef/cfncluster-cookbook.tgz.date)" $cookbook_url
            - |
              tar -xzf /etc/chef/cfncluster-cookbook.tgz
            - |
              cd /tmp
            - |
              # Call CloudFormation
            - 'cfn-init ${proxy_args} -s '
            - !Ref 'AWS::StackName'
            - ' -v -c default -r MasterServer --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'
            - >-
              cfn-signal ${proxy_args} --exit-code=0 --reason="MasterServer
              setup complete" --stack=
            - !Ref 'AWS::StackName'
            - ' --resource=MasterServer --region='
            - !Ref 'AWS::Region'
            - |+

            - |
              # End of file
            - |
              --==BOUNDARY==
    Metadata:
      Comment: cfncluster Master server
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - deployConfigFiles
            - getCookbooks
            - chefPrepEnv
            - shellRunPreInstall
            - chefConfig
            - shellRunPostInstall
            - shellForkClusterReadyInstall
        deployConfigFiles:
          files:
            /tmp/dna.json:
              mode: '000644'
              owner: root
              group: root
              content:
                cfncluster:
                  stack_name: !Ref 'AWS::StackName'
                  cfn_preinstall: !Ref PreInstallScript
                  cfn_preinstall_args: !Ref PreInstallArgs
                  cfn_postinstall: !Ref PostInstallScript
                  cfn_postinstall_args: !Ref PostInstallArgs
                  cfn_region: !Ref 'AWS::Region'
                  cfn_volume: !If 
                    - UseExistingEBSVolume
                    - !Ref EBSVolumeId
                    - !Ref SharedVolume
                  cfn_scheduler: !Ref Scheduler
                  cfn_encrypted_ephemeral: !Ref EncryptedEphemeral
                  cfn_ephemeral_dir: !Ref EphemeralDir
                  cfn_shared_dir: !Ref SharedDir
                  cfn_proxy: !Ref ProxyServer
                  cfn_node_type: MasterServer
                  cfn_cluster_user: !FindInMap 
                    - OSFeatures
                    - !Ref BaseOS
                    - User
                  cfn_ddb_table: !Ref DynamoDBTable
                  cfn_sqs_queue: !GetAtt 
                    - SQS
                    - QueueName
                run_list: !If 
                  - UseCustomRunList
                  - !Ref CustomChefRunList
                  - !Join 
                    - ''
                    - - 'recipe[cfncluster::'
                      - !Ref Scheduler
                      - '_config]'
            /etc/chef/client.rb:
              mode: '000644'
              owner: root
              group: root
              content: !Join 
                - ''
                - - 'cookbook_path [''/etc/chef/cookbooks'']'
            /tmp/extra.json:
              mode: '000644'
              owner: root
              group: root
              content: !Ref ExtraJson
          commands:
            mkdir:
              command: mkdir -p /etc/chef/ohai/hints
            touch:
              command: touch /etc/chef/ohai/hints/ec2.json
            jq:
              command: >-
                /usr/local/bin/jq --argfile f1 /tmp/dna.json --argfile f2
                /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster +
                $f2.cfncluster' > /etc/chef/dna.json || ( echo "jq not
                installed"; cp /tmp/dna.json /etc/chef/dna.json )
        getCookbooks:
          commands:
            berk:
              command: >-
                . /tmp/proxy.sh; for d in `ls /tmp/cookbooks`; do cd
                /tmp/cookbooks/$d;LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks
                vendor /etc/chef/cookbooks; done 
              cwd: /tmp/cookbooks
              env:
                HOME: /tmp
        chefPrepEnv:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json --override-runlist
                cfncluster::_prep_env
              cwd: /etc/chef
        shellRunPreInstall:
          commands:
            runpreinstall:
              command: /opt/cfncluster/scripts/fetch_and_run -preinstall
        chefConfig:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json
              cwd: /etc/chef
        shellRunPostInstall:
          commands:
            runpostinstall:
              command: /opt/cfncluster/scripts/fetch_and_run -postinstall
        shellForkClusterReadyInstall:
          commands:
            clusterreadyinstall:
              command: /opt/cfncluster/scripts/fetch_and_run -clusterreadyinstall
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT30M
  ComputeFleet:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MaxSize: !Ref MaxQueueSize
      VPCZoneIdentifier:
        - !Ref MasterSubnet
      LaunchConfigurationName: !Ref ComputeServerLaunchConfig
      MinSize: !If 
        - MaintainInitialASGSize
        - !Ref InitialQueueSize
        - '0'
      DesiredCapacity: !Ref InitialQueueSize
      NotificationConfiguration:
        TopicARN: !Ref SNS
        NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_TERMINATE'
      Tags:
        - Key: Name
          Value: Compute
          PropagateAtLaunch: 'true'
      PlacementGroup: !If 
        - UsePlacementGroup
        - !If 
          - CreatePlacementGroup
          - !Ref DynamicPlacementGroup
          - !Ref PlacementGroup
        - !Ref 'AWS::NoValue'
    DependsOn: MasterServer
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: !Ref ComputeWaitConditionCount
    Metadata: {}
  ComputeServerLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      SecurityGroups:
        - !If 
          - CreateSecurityGroups
          - !Ref ComputeSecurityGroup
          - !Ref 'AWS::NoValue'
        - !If 
          - AddAdditionalSG
          - !Ref AdditionalSG
          - !Ref 'AWS::NoValue'
        - !If 
          - UseExistingSecurityGroup
          - !Ref VPCSecurityGroupId
          - !Ref 'AWS::NoValue'
      AssociatePublicIpAddress: 'true' 
      InstanceType: !Ref ComputeInstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !If 
        - UseEC2IAMRole
        - !Ref EC2IAMRoleName
        - !Ref RootInstanceProfile
      SpotPrice: !If 
        - UseSpotInstances
        - !Ref SpotPrice
        - !Ref 'AWS::NoValue'
      ImageId: !If 
        - UseCustomAMI
        - !Ref CustomAMI
        - !FindInMap 
          - AWSRegionOS2AMI
          - !Ref 'AWS::Region'
          - !Ref BaseOS
      InstanceMonitoring: 'false'
      BlockDeviceMappings:
        - DeviceName: /dev/xvdba
          VirtualName: ephemeral0
        - DeviceName: /dev/xvdbb
          VirtualName: ephemeral1
        - DeviceName: /dev/xvdbc
          VirtualName: ephemeral2
        - DeviceName: /dev/xvdbd
          VirtualName: ephemeral3
        - DeviceName: /dev/xvdbe
          VirtualName: ephemeral4
        - DeviceName: /dev/xvdbf
          VirtualName: ephemeral5
        - DeviceName: /dev/xvdbg
          VirtualName: ephemeral6
        - DeviceName: /dev/xvdbh
          VirtualName: ephemeral7
        - DeviceName: /dev/xvdbi
          VirtualName: ephemeral8
        - DeviceName: /dev/xvdbj
          VirtualName: ephemeral9
        - DeviceName: /dev/xvdbk
          VirtualName: ephemeral10
        - DeviceName: /dev/xvdbl
          VirtualName: ephemeral11
        - DeviceName: /dev/xvdbm
          VirtualName: ephemeral12
        - DeviceName: /dev/xvdbn
          VirtualName: ephemeral13
        - DeviceName: /dev/xvdbo
          VirtualName: ephemeral14
        - DeviceName: /dev/xvdbp
          VirtualName: ephemeral15
        - DeviceName: /dev/xvdbq
          VirtualName: ephemeral16
        - DeviceName: /dev/xvdbr
          VirtualName: ephemeral17
        - DeviceName: /dev/xvdbs
          VirtualName: ephemeral18
        - DeviceName: /dev/xvdbt
          VirtualName: ephemeral19
        - DeviceName: /dev/xvdbu
          VirtualName: ephemeral20
        - DeviceName: /dev/xvdbv
          VirtualName: ephemeral21
        - DeviceName: /dev/xvdbw
          VirtualName: ephemeral22
        - DeviceName: /dev/xvdbx
          VirtualName: ephemeral23
        - DeviceName: !FindInMap 
            - OSFeatures
            - !Ref BaseOS
            - RootDevice
          Ebs:
            VolumeSize: !Ref ComputeRootVolumeSize
            VolumeType: gp2
      PlacementTenancy: !If 
        - UseDedicatedTenancy
        - !Ref Tenancy
        - !Ref 'AWS::NoValue'
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            - |+
              MIME-Version: 1.0

            - |
              --==BOUNDARY==
            - |
              Content-Type: text/cloud-config; charset="us-ascii"
            - |+
              MIME-Version: 1.0

            - |
              #cloud-config:
            - |
              runcmd:
            - ' - [  sh, "which yum && echo '
            - !Ref ProxyServer
            - |2
               >> /etc/yum.conf" ]
            - ' - [ sh, "which apt-get && echo Acquire::http::Proxy "'
            - !Ref ProxyServer
            - |
              "; >> /etc/apt/apt.conf" ]
            - |
              --==BOUNDARY==
            - |
              Content-Type: text/x-shellscript; charset="us-ascii"
            - |+
              MIME-Version: 1.0

            - |+
              #!/bin/bash -x

            - |
              function error_exit
            - |
              {
            - '  cfn-signal ${proxy_args} --exit-code=1 --reason="$1" --stack='
            - !Ref 'AWS::StackName'
            - ' --resource=ComputeFleet --region='
            - !Ref 'AWS::Region'
            - |+

            - |2
                exit 1
            - |
              }
            - |
              function bootstrap_instance
            - |
              {
            - |2
                which yum 2>/dev/null; yum=$?
            - |2
                which apt-get 2>/dev/null; apt=$?
            - |2
                if [ "$yum" == "0" ]; then
            - |2
                  yum -y groupinstall development && yum -y install curl wget
            - |2
                fi
            - |2
                if [ "$apt" == "0" ]; then
            - |2
                  apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget
            - |2
                fi
            - |2
                which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)
            - |2
                mkdir -p /etc/chef && chown -R root:root /etc/chef
            - |2
                curl -L https://www.chef.io/chef/install.sh | bash -s -- -v $chef_version
            - |2
                /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:$ridley_version berkshelf:$berkshelf_version
            - |2
                curl -s -L -o /etc/chef/cfncluster-cookbook.tgz $cookbook_url
            - |2
                curl -s -L -o /etc/chef/cfncluster-cookbook.tgz.date $cookbook_url.date
            - |2
                curl -s -L -o /etc/chef/cfncluster-cookbook.tgz.md5 $cookbook_url.md5
            - |2
                mkdir /opt/cfncluster && echo $cfncluster_version | tee /opt/cfncluster/.bootstrapped
            - |
              }
            - proxy=
            - !Ref ProxyServer
            - |+

            - custom_cookbook=
            - !Ref CustomChefCookbook
            - |+

            - |
              if [ "$proxy" != "NONE" ]; then
            - |2
                proxy_args="--http-proxy=${proxy} --https-proxy=${proxy}"
            - |2
                proxy_host=$(echo "$proxy" | awk -F/ '{print $3}' | cut -d: -f1)
            - |2
                proxy_port=$(echo "$proxy" | awk -F/ '{print $3}' | cut -d: -f2)
            - |2
                export http_proxy=$proxy; export https_proxy=$http_proxy
            - |2
                export HTTP_PROXY=$proxy; export HTTPS_PROXY=$http_proxy
            - |2
                export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254
            - |2
                echo -e "export http_proxy=$proxy; export https_proxy=$http_proxy
              export HTTP_PROXY=$proxy; export HTTPS_PROXY=$http_proxy
              export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254
              " >/tmp/proxy.sh
            - |2
                echo -e "[Boto]
              proxy = ${proxy_host}
              proxy_port = ${proxy_port}
              " >/etc/boto.cfg
            - |
              else
            - |2
                proxy_args=""
            - |2
                touch /tmp/proxy.sh
            - |
              fi
            - |
              if [ "$custom_cookbook" != "NONE" ]; then
            - |2
                cookbook_url=$custom_cookbook
            - |
              else
            - '  if [ "'
            - !Ref 'AWS::Region'
            - |
              " == "us-east-1" ]; then
            - |2
                  s3_prefix=s3
            - |2
                else
            - '    s3_prefix=s3-'
            - !Ref 'AWS::Region'
            - |+

            - |2
                fi
            - '  cookbook_url=https://${s3_prefix}.amazonaws.com/cfncluster-resources-'
            - !Ref 'AWS::Region'
            - /cookbooks/
            - !FindInMap 
              - CfnClusterVersions
              - default
              - cookbook
            - |
              .tgz
            - |
              fi
            - >
              export
              PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
            - export cfncluster_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - cfncluster
            - |+

            - export cookbook_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - cookbook
            - |+

            - export chef_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - chef
            - |+

            - export ridley_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - ridley
            - |+

            - export berkshelf_version=
            - !FindInMap 
              - CfnClusterVersions
              - default
              - berkshelf
            - |+

            - |
              if [ -f /opt/cfncluster/.bootstrapped ]; then
            - |2
                installed_version=$(cat /opt/cfncluster/.bootstrapped)
            - |2
                if [ "$cfncluster_version" != "$installed_version" ]; then
            - |2
                  bootstrap_instance
            - |2
                fi
            - |
              else
            - |2
                bootstrap_instance
            - |
              fi
            - |
              mkdir /tmp/cookbooks
            - |
              cd /tmp/cookbooks
            - >
              curl -v -L -o /etc/chef/cfncluster-cookbook.tgz -z "$(cat
              /etc/chef/cfncluster-cookbook.tgz.date)" $cookbook_url
            - |
              tar -xzf /etc/chef/cfncluster-cookbook.tgz
            - |
              cd /tmp
            - |
              # Call CloudFormation
            - 'cfn-init ${proxy_args} -s '
            - !Ref 'AWS::StackName'
            - ' -v -c default -r ComputeServerLaunchConfig --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'
            - >-
              cfn-signal ${proxy_args} --exit-code=0 --reason="MasterServer
              setup complete" --stack=
            - !Ref 'AWS::StackName'
            - ' --resource=ComputeFleet --region='
            - !Ref 'AWS::Region'
            - |+

            - |
              # End of file
            - |
              --==BOUNDARY==
    Metadata:
      Comment: cfncluster Compute server
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - deployConfigFiles
            - getCookbooks
            - chefPrepEnv
            - shellRunPreInstall
            - chefConfig
            - shellRunPostInstall
            - shellForkClusterReadyInstall
            - signalComputeReady
        deployConfigFiles:
          files:
            /tmp/dna.json:
              mode: '000644'
              owner: root
              group: root
              content:
                cfncluster:
                  stack_name: !Ref 'AWS::StackName'
                  cfn_preinstall: !Ref PreInstallScript
                  cfn_preinstall_args: !Ref PreInstallArgs
                  cfn_postinstall: !Ref PostInstallScript
                  cfn_postinstall_args: !Ref PostInstallArgs
                  cfn_region: !Ref 'AWS::Region'
                  cfn_scheduler: !Ref Scheduler
                  cfn_encrypted_ephemeral: !Ref EncryptedEphemeral
                  cfn_ephemeral_dir: !Ref EphemeralDir
                  cfn_shared_dir: !Ref SharedDir
                  cfn_proxy: !Ref ProxyServer
                  cfn_sqs_queue: !Ref SQS
                  cfn_master: !GetAtt 
                    - MasterServer
                    - PrivateDnsName
                  cfn_node_type: ComputeFleet
                  cfn_cluster_user: !FindInMap 
                    - OSFeatures
                    - !Ref BaseOS
                    - User
                run_list: !If 
                  - UseCustomRunList
                  - !Ref CustomChefRunList
                  - !Join 
                    - ''
                    - - 'recipe[cfncluster::'
                      - !Ref Scheduler
                      - '_config]'
            /etc/chef/client.rb:
              mode: '000644'
              owner: root
              group: root
              content: !Join 
                - ''
                - - 'cookbook_path [''/etc/chef/cookbooks'']'
            /tmp/extra.json:
              mode: '000644'
              owner: root
              group: root
              content: !Ref ExtraJson
          commands:
            mkdir:
              command: mkdir -p /etc/chef/ohai/hints
            touch:
              command: touch /etc/chef/ohai/hints/ec2.json
            jq:
              command: >-
                /usr/local/bin/jq --argfile f1 /tmp/dna.json --argfile f2
                /tmp/extra.json -n '$f1 + $f2 | .cfncluster = $f1.cfncluster +
                $f2.cfncluster' > /etc/chef/dna.json || ( echo "jq not
                installed"; cp /tmp/dna.json /etc/chef/dna.json )
        getCookbooks:
          commands:
            berk:
              command: >-
                . /tmp/proxy.sh; for d in `ls /tmp/cookbooks`; do cd
                /tmp/cookbooks/$d;LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks
                vendor /etc/chef/cookbooks; done 
              cwd: /tmp/cookbooks
              env:
                HOME: /tmp
        chefPrepEnv:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json --override-runlist
                cfncluster::_prep_env
              cwd: /etc/chef
        shellRunPreInstall:
          commands:
            runpreinstall:
              command: /opt/cfncluster/scripts/fetch_and_run -preinstall
        chefConfig:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json
              cwd: /etc/chef
        shellRunPostInstall:
          commands:
            runpostinstall:
              command: /opt/cfncluster/scripts/fetch_and_run -postinstall
        shellForkClusterReadyInstall:
          commands:
            clusterreadyinstall:
              command: /opt/cfncluster/scripts/fetch_and_run -clusterreadyinstall
        signalComputeReady:
          commands:
            compute_ready:
              command: /opt/cfncluster/scripts/compute_ready
  ScaleUpPolicy2:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      Cooldown: !Ref ScalingCooldown
      ScalingAdjustment: !Ref ScalingAdjustment2
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ComputeFleet
    Metadata: {}
  AddCapacityAlarm2:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      Threshold: !Ref ScalingThreshold2
      Period: !Ref ScalingPeriod
      EvaluationPeriods: !Ref ScalingEvaluationPeriods
      Statistic: Sum
      AlarmActions:
        - !Ref ScaleUpPolicy2
      Namespace: cfncluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Stack
          Value: !Ref 'AWS::StackName'
      MetricName: pending
    Metadata: {}
  ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      Cooldown: !Ref ScalingCooldown
      ScalingAdjustment: !Ref ScalingAdjustment
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ComputeFleet
    Metadata: {}
  AddCapacityAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      Threshold: !Ref ScalingThreshold
      Period: !Ref ScalingPeriod
      EvaluationPeriods: !Ref ScalingEvaluationPeriods
      Statistic: Average
      AlarmActions:
        - !Ref ScaleUpPolicy
      Namespace: cfncluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: Stack
          Value: !Ref 'AWS::StackName'
      MetricName: pending
    Metadata: {}
  OmicronVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
  OmicronIGW:
    Type: 'AWS::EC2::InternetGateway'
  OmicronIGWA:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref OmicronIGW
      VpcId: !Ref OmicronVPC
  MasterSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref OmicronVPC
      CidrBlock: 10.0.1.0/20
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: !Ref UsePublicIps

    Metadata: {}
  MasterRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref OmicronVPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: ComputeSubnet
  MasterSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MasterSubnet
      RouteTableId: !Ref MasterRouteTable
  MasterRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - OmicronIGW
    Properties:
      RouteTableId: !Ref MasterRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref OmicronIGW

  MasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to the Master host
      VpcId: !Ref OmicronVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: '8022'
          ToPort: '8022'
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: '21'
          ToPort: '21'
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: '30000'
          ToPort: '30100'
          CidrIp: !Ref AccessFrom
    Condition: CreateSecurityGroups
    Metadata: {}
  MasterSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: '-1'
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref ComputeSecurityGroup
      GroupId: !Ref MasterSecurityGroup
    Condition: CreateSecurityGroups
    Metadata: {}
  ComputeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to resources in subnets behind front
      VpcId: !Ref OmicronVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref MasterSecurityGroup
          IpProtocol: '-1'
          FromPort: '0'
          ToPort: '65535'
    Condition: CreateSecurityGroups
    Metadata: {}
  ComputeSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: '-1'
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref ComputeSecurityGroup
      GroupId: !Ref ComputeSecurityGroup
    Condition: CreateSecurityGroups
  MasterENI:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: cfncluster Master Server
      SubnetId: !Ref MasterSubnet
      SourceDestCheck: 'false'
      GroupSet:
        - !If 
          - CreateSecurityGroups
          - !Ref MasterSecurityGroup
          - !Ref 'AWS::NoValue'
        - !If 
          - AddAdditionalSG
          - !Ref AdditionalSG
          - !Ref 'AWS::NoValue'
        - !If 
          - UseExistingSecurityGroup
          - !Ref VPCSecurityGroupId
          - !Ref 'AWS::NoValue'
    Metadata: {}
  AdditionalCfnStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Ref AdditionalCfnTemplate
    Condition: CreateSubStack
  SharedVolume:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      VolumeType: !Ref VolumeType
      Size: !If 
        - UseEBSSnapshot
        - !Ref 'AWS::NoValue'
        - !Ref VolumeSize
      SnapshotId: !If 
        - UseEBSSnapshot
        - !Ref EBSSnapshotId
        - !Ref 'AWS::NoValue'
      Iops: !If 
        - UseEBSPIOPS
        - !Ref VolumeIOPS
        - !Ref 'AWS::NoValue'
      Encrypted: !If 
        - UseEBSEncryption
        - !Ref EBSEncryption
        - !Ref 'AWS::NoValue'
      KmsKeyId: !If 
        - UseEBSKMSKey
        - !Ref EBSKMSKeyId
        - !Ref 'AWS::NoValue'
    Condition: CreateEBSVolume
    Metadata: {}
  AssociateEIP:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt 
        - MasterEIP
        - AllocationId
      NetworkInterfaceId: !Ref MasterENI
    Condition: MasterPublicIp
    Metadata: {}
  DynamicPlacementGroup:
    Type: 'AWS::EC2::PlacementGroup'
    Properties:
      Strategy: cluster
    Condition: CreatePlacementGroup
    Metadata: {}
Outputs:
  MasterPrivateIP:
    Description: Private IP Address of the Master host
    Value: !GetAtt 
      - MasterServer
      - PrivateIp
  MasterPublicIP:
    Description: Public IP Address of the Master host
    Value: !GetAtt 
      - MasterServer
      - PublicIp
    Condition: MasterPublicIp
  GangliaPrivateURL:
    Description: Private URL to access Ganglia
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - MasterServer
          - PrivateIp
        - /ganglia/
  GangliaPublicURL:
    Description: Public URL to access Ganglia
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - MasterServer
          - PublicIp
        - /ganglia/
    Condition: MasterPublicIp
