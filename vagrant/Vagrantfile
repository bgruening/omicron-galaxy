# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Define the Galaxy gateway
  config.vm.define "gateway" do |gateway|
    gateway.vm.hostname = "gateway"
    gateway.vm.network "private_network", ip: "192.168.33.10"

    # Forward ports
    gateway.vm.network :forwarded_port, guest: 80, host: 8080
    gateway.vm.network :forwarded_port, guest: 9009, host: 8090
    gateway.vm.network :forwarded_port, guest: 9090, host: 9090
    gateway.vm.network :forwarded_port, guest: 8021, host: 8021

    # VirtualBox settings
    gateway.vm.provider "virtualbox" do |vb|
      #vb.gui = true
      vb.memory = "4096"
      vb.cpus = 4
    end

    # Run shell provisioner (before mounting /export)
    gateway.vm.provision "shell", inline: <<-SHELL
      set -e

      # add galaxy and postgres users to facilitate sharing folders with non-Linux hosts
      groupadd -r galaxy -g 1450; adduser --quiet --no-create-home --disabled-password --shell /bin/bash --gecos "" --uid 1450 --gid 1450 galaxy
      groupadd -r postgres -g 1550; adduser --system --quiet --home /var/lib/postgresql --disabled-password --no-create-home --shell /bin/bash --gecos "" --uid 1550 --gid 1550 postgres
      
      # install Docker from their site
      wget -qO- https://get.docker.com/ | sh
      usermod -aG docker vagrant
      
      # switch to devicemapper to workaround "could not access private key file" and restart docker for it to take effect
      echo DOCKER_OPTS="--storage-driver=devicemapper" >> /etc/default/docker
      service docker restart
      
      #echo /export worker??(rw,sync,no_subtree_check) > /etc/exports
      #apt-get install -y --no-install-recommends nfs-kernel-server
      
      #echo 192.168.33.11 worker01 > /etc/hosts
    SHELL
    
    # Mount folders on host 
    #gateway.vm.synced_folder "export/galaxy-central", "/export/galaxy-central", create: true
    gateway.vm.synced_folder "export/src", "/export/src", create: true
    gateway.vm.synced_folder "export/data", "/export/data", create: true
    gateway.vm.synced_folder "../docker", "/export/docker", create: true
    gateway.vm.synced_folder "../cfncluster", "/export/cfncluster", create: true

    #gateway.vm.provision "shell", run: "always", inline: "umount export_galaxy-central; mount -t vboxsf -o uid=1450,gid=1450,fmode=0755,dmode=0755 export_galaxy-central /export/galaxy-central"
    gateway.vm.provision "shell", run: "always", inline: "umount export_src; mount -t vboxsf -o uid=1450,gid=1450,fmode=0755,dmode=0755 export_src /export/src"
    gateway.vm.provision "shell", run: "always", inline: "umount export_data; mount -t vboxsf -o uid=1450,gid=1450,fmode=0755,dmode=0755 export_data /export/data"

    # Extra folder for my pwiz builds
    #gateway.vm.synced_folder "c:/pwiz-src", "/pwiz-src" #, type: "nfs"

    # Run shell provisioner (after mounting /export)
    #gateway.vm.provision "shell", inline: <<-SHELL
    #  set -e

      # Create munge key and move it to /export/data
      #apt-get install -y --no-install-recommends munge
      #create-munge-key
      #cp -f /etc/munge/munge.key /export/data
      #rm -f /etc/munge/munge.key # inter-device mv not supported
      
      # Create symbolic links to slurm.conf and munge.key
      #mkdir /etc/slurm-llnl
      #ln -s /export/data/slurm.conf /etc/slurm-llnl/slurm.conf
      #ln -s /export/data/munge.key /etc/munge/munge.key
      #echo OPTIONS="--force" >> /etc/default/munge
      #service munge restart
      #apt-get install -y --no-install-recommends slurm-llnl slurm-drmaa1
    #SHELL
    
    #gateway.vm.provision "shell", inline: "/export/src/clean_export.sh"
    
    # docker run --name bingomics -d -p 0.0.0.0:80:80 -p 0.0.0.0:8021:21 -p 0.0.0.0:8800:8800 -p 0.0.0.0:9009:9009 -p 0.0.0.0:9002:9002 -e "NONUSE=slurmd,slurmctld" -e "GALAXY_LOGGING=full" -v /export/:/export/ chambm/bingomics-galaxy
    gateway.vm.provision "docker", run: "always" do |d|
      d.run "omicron",
        image: "chambm/omicron-galaxy",
        #cmd: "bash -l",
        daemonize: true,
        args: '-p 0.0.0.0:80:80 -p 0.0.0.0:8021:21 -p 0.0.0.0:8800:8800 -p 0.0.0.0:9009:9009 -p 0.0.0.0:9002:9002 -p 0.0.0.0:9090:9090 -e "NONUSE=slurmd,slurmctld" -e "GALAXY_LOGGING=full" -v /export/:/export/',
        restart: "always"
    end
  end
    
  #config.trigger.before :destroy do
  #  run_remote "/export/src/clean_export.sh"
  #end

  # Define a Galaxy worker node
  #config.vm.define "worker" do |worker|
  #  worker.vm.hostname = "worker01"
  #  worker.vm.network "private_network", ip: "192.168.33.11"
  #
  #  # VirtualBox settings
  #  worker.vm.provider "virtualbox" do |vb|
  #    #vb.gui = true
  #    vb.memory = "2048"
  #    vb.cpus = 4
  #  end
  #
  #  # Run-once shell provisioner (before mounting /export)
  #  worker.vm.provision "shell", inline: <<-SHELL
  #    set -e
  #
  #    # add galaxy user to facilitate sharing folders with non-Linux hosts
  #    groupadd -r galaxy -g 1450; adduser --quiet --no-create-home --disabled-password --shell /bin/bash --gecos "" --uid 1450 --gid 1450 galaxy
  #    
  #    echo 192.168.33.10 gateway > /etc/hosts    
  #  SHELL
  #  
  #  # Mount/create host folders on worker node, using default user (NFS from gateway to worker cannot overlap with vboxsf mount points)
  #  # Note: synced_folder runs BEFORE any provisioners, so the galaxy user does not exist yet
  #  worker.vm.synced_folder "export/galaxy-central", "/export/galaxy-central", create: true
  #  worker.vm.synced_folder "export/src", "/export/src", create: true
  #  worker.vm.synced_folder "export/data", "/export/data", create: true
  #
  #  # Unmount default-user vboxsf shares and remount as galaxy user every time worker starts (galaxy user created in the run-once provisioner above)
  #  worker.vm.provision "shell", run: "always", inline: "umount export_galaxy-central; mount -t vboxsf -o uid=1450,gid=1450,fmode=0755,dmode=0755 export_galaxy-central /export/galaxy-central"
  #  worker.vm.provision "shell", run: "always", inline: "umount export_src; mount -t vboxsf -o uid=1450,gid=1450,fmode=0755,dmode=0755 export_src /export/src"
  #  worker.vm.provision "shell", run: "always", inline: "umount export_data; mount -t vboxsf -o uid=1450,gid=1450,fmode=0755,dmode=0755 export_data /export/data"
  #  
  #  # Run-once shell provisioner (after mounting /export)
  #  worker.vm.provision "shell", inline: <<-SHELL
  #    set -e
  #    
  #    # Create symbolic links to slurm.conf and munge.key
  #    mkdir /etc/slurm-llnl; ln -s /export/data/slurm.conf /etc/slurm-llnl/slurm.conf
  #    mkdir /etc/munge; ln -s /export/data/munge.key /etc/munge/munge.key
  #    
  #    # Make mount points for NFS shares
  #    mkdir -p /galaxy-central/database/job_working_directory
  #    chown galaxy:galaxy -R /galaxy-central
  #    
  #    # Add --force to work around /var/log permissions issue with munge
  #    echo OPTIONS="--force" >> /etc/default/munge
  #    
  #    # Install SLURM (--force-confdef will keep existing /etc/default/munge)
  #    apt-get install -y --no-install-recommends -o Dpkg::Options::=--force-confdef slurm-llnl slurm-drmaa1
  #  SHELL
  #
  #  # Mount NFS shares every time worker starts (mount points created in the run-once provision above)
  #  worker.vm.provision "shell", run: "always", inline: <<-SHELL
  #    set -e
  #    mount --bind /export/galaxy-central/ /galaxy-central/"
  #    mount -t nfs gateway:/export/galaxy-cluster/job_working_directory /galaxy-central/database/job_working_directory
  #    mount -t nfs gateway:/export/galaxy-cluster /export/galaxy-cluster
  #  SHELL
  #end

  # Create a private network, which allows host-only access to the machine using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  # config.vm.network "private_network", type: "dhcp"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on your network.
  # config.vm.network "public_network"


  # View the documentation for the provider you are using for more information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  #config.push.define "atlas" do |push|
  #  push.app = "chambm/bingomics-galaxy-vm"
  #end

  # prevent "stdin: is not a tty" errors
  config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  #config.vm.provision "shell", path: "run.sh"
  #config.winnfsd.logging = "on"

end
